philosopher left_fork right_fork done {
    (printf " [ %p ] waiting for left fork\n" (self))
    (receive left_fork)

    (printf " [ %p ] waiting for right fork\n" (self))
    (receive right_fork)

    (printf " [ %p ] dining\n" (self))
    (sleep 10)

    (printf " [ %p ] returning left fork\n" (self))
    (sleep 10)
    (send left_fork 0)

    (printf " [ %p ] returning right fork\n" (self))
    (sleep 10)
    (send right_fork 0)

    (printf " [ %p ] thinking\n" (self))
    (sleep 10)
    (send done 0)
}

iter c n {
    if (= n 0) {
        0
    } else {
        (receive c)
        (iter c (- n 1))
    }
}

main {
    let fork0 { (channel) }
    let fork1 { (channel) }
    let fork2 { (channel) }
    let fork3 { (channel) }
    let fork4 { (channel) }

    (send fork0 0)
    (send fork1 0)
    (send fork2 0)
    (send fork3 0)
    (send fork4 0)

    let done { (channel) }

    (spawn philosopher fork0 fork1 done)
    (spawn philosopher fork1 fork2 done)
    (spawn philosopher fork2 fork3 done)
    (spawn philosopher fork3 fork4 done)

    (spawn philosopher fork0 fork4 done)

    (iter done 5)

    (printf "Done!\n")
}
